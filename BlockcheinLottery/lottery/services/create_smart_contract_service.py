from web3 import Web3
from web3 import Web3, HTTPProvider
import json
from enum import Enum
# import module
import traceback



_priceFeedAddress = "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
_vrfCoordinator = "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D"
_link = "0x326C977E6efc84E512bB9C30f76E30c160eD06FB"

# 0x160344e2

public_key = "0x132A5031a86e43338D3639071372D7394c26E927"
private_key = ""

url = "https://sepolia.infura.io/v3/763c512993564fab9aaf58f6f126924c"
bytecode = ""

def create_smart_contract(lottery):
    web3 = Web3(Web3.HTTPProvider(url))

    abi_file = open('/Users/user/Desktop/ВШЭ/Курсовой проект/LotteryProject/BlockcheinLottery/lottery/services/lottery_abi.json')
    abi = json.load(abi_file)

    contract = web3.eth.contract(abi=abi, bytecode=bytecode)
    # print(contract.functions.getEntranceFee().call())

    nonce = web3.eth.getTransactionCount(public_key)
    print("Create contract")
    print("lottery.gwei_fee: " + str(lottery.gwei_fee) + " " + str(lottery.max_players))
    transaction = contract.constructor(lottery.gwei_fee, lottery.max_players).build_transaction(
        {
            "gasPrice": web3.eth.gas_price,
            "chainId": 11155111,
            "from": public_key,
            "nonce": web3.eth.getTransactionCount(public_key),
        }
    )
    print("sign!!!")
    return transaction["data"]
    # # signed_transaction = web3.eth.account.sign_transaction(transaction, private_key=private_key)
    # tx_hash = web3.eth.send_raw_transaction(signed_transaction.rawTransaction)
    # print("HASH")
    # print(tx_hash)
    # tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
    # print("RECEIPT")
    # print(tx_receipt)
    # print(tx_receipt["contractAddress"])
    #
    # lottery.address = tx_receipt["contractAddress"]
    # lottery.save()


lottery_state = {
    -1: "Лоттерея еще не создана",
    0: "Лоттерея запущена",
    1: "Лоттерея закрыта",
    2: "Идет раассчет победителей",
}


def get_lottery_info(address, user_address):
    if address == "":
        return lottery_state[-1], 0, 0, 0
    print("Enter get lottery")
    try:
        web3 = Web3(Web3.HTTPProvider(url))
        abi_file = open('/Users/user/Desktop/ВШЭ/Курсовой проект/LotteryProject/BlockcheinLottery/lottery/services/lottery_abi.json')
        abi = json.load(abi_file)
        print("Enter to get " + address)
        contract = web3.eth.contract(address=address, abi=abi)
        print("GOT contract")
        res = contract.functions.getLotteryState().call()
        recent_winner = ""
        try:
            recent_winner = contract.functions.getRecentWinner().call()
        except:
            print("No winner")
        user_address = str(user_address)
        players_size = contract.functions.getPlayersSize().call()
        is_participating = 0
        print(user_address)
        try:
            is_participating = contract.functions.isParticipating(Web3.toChecksumAddress(user_address)).call()
        except:
            traceback.print_exc()
            print("Not started yet")
        print(res)
        print(recent_winner)
        print(players_size)
        print(is_participating)
        return lottery_state[res], recent_winner, players_size, is_participating
    except:
        #0xb19672D8E838442FFb9A354558bea2fd7f2f708b
        #0x8433e03b494ed08936ff8a9f3f9980c1dcba7c74


        traceback.print_exc()
        print("Exception")
        return lottery_state[-1], 0, 0, 0


def start_lottery_transaction(lottery):
    web3 = Web3(Web3.HTTPProvider(url))

    abi_file = open('/Users/user/Desktop/ВШЭ/Курсовой проект/LotteryProject/BlockcheinLottery/lottery/services/lottery_abi.json')
    abi = json.load(abi_file)

    contract = web3.eth.contract(abi=abi, bytecode=bytecode)
    print("Contract!")
    print(web3.eth.gas_price)
    transaction = contract.functions.startLottery().build_transaction({
        "to": lottery.address,
        "gasPrice": web3.eth.gas_price,
        "chainId": 11155111,
        "from": public_key,
        "nonce": web3.eth.getTransactionCount(public_key),
    })
    print(transaction["data"])
    return transaction["data"]


def enter_lottery_transaction(lottery):
    print("enter_lottery_transaction")
    web3 = Web3(Web3.HTTPProvider(url))

    abi_file = open('/Users/user/Desktop/ВШЭ/Курсовой проект/LotteryProject/BlockcheinLottery/lottery/services/lottery_abi.json')
    abi = json.load(abi_file)

    contract = web3.eth.contract(abi=abi, bytecode=bytecode)
    print("Contract!")
    print(web3.eth.gas_price)
    transaction = contract.functions.enter().build_transaction({
        "to": lottery.address,
        "gasPrice": web3.eth.gas_price,
        "chainId": 11155111,
        "from": public_key,
        "nonce": web3.eth.getTransactionCount(public_key),
        "value": lottery.gwei_fee
    })
    print(transaction["data"])
    return transaction["data"]


def end_lottery_transaction(lottery):
    web3 = Web3(Web3.HTTPProvider(url))

    abi_file = open(
        '/Users/user/Desktop/ВШЭ/Курсовой проект/LotteryProject/BlockcheinLottery/lottery/services/lottery_abi.json')
    abi = json.load(abi_file)

    contract = web3.eth.contract(abi=abi, bytecode=bytecode)
    print("end_lottery!")

    transaction = contract.functions.endLottery().build_transaction({
        "to": lottery.address,
        "gasPrice": web3.eth.gas_price,
        "chainId": 11155111,
        "from": public_key,
        "nonce": web3.eth.getTransactionCount(public_key),
    })

    print(transaction["data"])

    signed_transaction = web3.eth.account.sign_transaction(transaction, private_key=private_key)
    tx_hash = web3.eth.send_raw_transaction(signed_transaction.rawTransaction)
    print("HASH")
    print(tx_hash)
    tx_receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
    print("RECEIPT")
    print(tx_receipt)




